# Generated by Django 5.1 on 2025-02-28 18:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('transportation', '0003_trip_trip_purpose_truck_assigned_user_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='GPSRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imei', models.CharField(help_text='Unique device identifier', max_length=50)),
                ('name', models.CharField(help_text='Truck name or plate number as received from the API', max_length=100)),
                ('group', models.CharField(blank=True, max_length=100, null=True)),
                ('odometer', models.DecimalField(decimal_places=3, help_text='Odometer reading', max_digits=15)),
                ('engine', models.CharField(help_text='Engine status (on/off)', max_length=10)),
                ('status', models.CharField(help_text='Status string from the GPS device', max_length=100)),
                ('dt_server', models.DateTimeField(help_text='Server timestamp when data was received')),
                ('dt_tracker', models.DateTimeField(help_text='Timestamp when the tracker recorded the data')),
                ('lat', models.DecimalField(decimal_places=6, help_text='Latitude', max_digits=9)),
                ('lng', models.DecimalField(decimal_places=6, help_text='Longitude', max_digits=9)),
                ('loc', models.TextField(blank=True, help_text='Human-readable location', null=True)),
                ('nearset_zone', models.CharField(blank=True, help_text='Nearest zone information', max_length=50, null=True)),
                ('altitude', models.DecimalField(decimal_places=2, help_text='Altitude in meters', max_digits=10)),
                ('angle', models.IntegerField(help_text='Direction angle in degrees')),
                ('speed', models.DecimalField(decimal_places=2, help_text='Speed in km/h', max_digits=6)),
                ('fuel_1', models.DecimalField(decimal_places=2, help_text='Fuel level from sensor 1', max_digits=6)),
                ('fuel_2', models.DecimalField(decimal_places=2, help_text='Fuel level from sensor 2', max_digits=6)),
                ('fuel_can_level_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Fuel can level in percent', max_digits=5, null=True)),
                ('fuel_can_level_value', models.DecimalField(blank=True, decimal_places=2, help_text='Fuel can level value', max_digits=10, null=True)),
                ('params', models.JSONField(help_text='Additional sensor and diagnostic data from the GPS device')),
                ('custom_fields', models.JSONField(blank=True, help_text='Custom fields sent from the GPS device', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('truck', models.ForeignKey(help_text='Truck associated with this GPS record, linked via its unique plate number.', on_delete=django.db.models.deletion.CASCADE, to='transportation.truck', to_field='plate_number')),
            ],
        ),
    ]
